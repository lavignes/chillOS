pkg U8;

use Err;
use UInt;
use Mem;

pub let MIN: U8 = 0x00u8;
pub let MAX: U8 = 0xFFu8;
pub let BITS: UInt = sizeof U8 * 8;
pub let EMPTY: []U8 = 0 as &U8 ~ 0;
pub let EMPTY_MUT: []mut U8 = 0 as &mut U8 ~ 0;

pub extern fn read_volatile(addr: &U8) -> U8;
pub extern fn write_volatile(addr: &mut U8, val: U8);

pub fn is_zero(val: U8) -> Bool {
    return val == 0;
}

pub fn find(items: []U8, predicate: &fn(val: U8) -> Bool) -> !UInt {
    return find_ctx(items, predicate as &mut U8, fn(ctx: &mut U8, val: U8) -> Bool {
        return (ctx as &fn(_: U8) -> Bool)(val);
    });
}

pub fn find_ctx(items: []U8, ctx: &mut U8, predicate: &fn(ctx: &mut U8, val: U8) -> Bool) -> !UInt {
    let mut i = 0u;
    for i < lengthof items {
        if predicate(ctx, items[i]) {
            return i ok;
        }
        i += 1;
    }
    return Err::NOT_FOUND err;
}

pub fn sort(items: []mut U8) {
    Mem::sort(items, sizeof U8, fn(lhs: []U8, rhs: []U8) -> Int {
        return (lhs[0] - rhs[0]) as Int;
    });
}

pub fn parse(base: UInt, str: []U8) -> !U8 {
    try let uint: UInt = UInt::parse(base, str);
    if uint > (MAX as UInt) {
        return Err::OUT_OF_RANGE err;
    }
    return uint as U8 ok;
}
