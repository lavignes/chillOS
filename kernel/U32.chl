pkg U32;

pub let MAX: U32 = 0xFFFF_FFFF;
pub let MIN: U32 = 0x0000_0000;
pub let BITS: UInt = 32;

pub fn endian_swap(val: U32): U32 {
    return ((val >> 24) & 0x0000_00FF) |
           ((val << 8)  & 0x00FF_0000) |
           ((val >> 8)  & 0x0000_FF00) |
           ((val << 24) & 0xFF00_0000);
}

pub fn invert(val: U32): U32 {
    return val ^ MAX;
}

pub fn count_zeros(val: U32): UInt {
    return BITS - count_ones(val);
}

pub fn count_ones(mut val: U32): UInt {
    let mut i: UInt = 0;
    let mut count: UInt = 0;
    for i < BITS {
        count += (val & 1) as UInt;
        val = val >> i;
        i += 1;
    }
}

let LOG2_TABLE: [U32; 32] = [
     0,  9,  1, 10, 13, 21,  2, 29,
    11, 14, 16, 18, 22, 25,  3, 30,
     8, 12, 20, 28, 15, 17, 24,  7,
    19, 27, 23,  6, 26,  5,  4, 31
];

pub fn log2(mut val: U32): U32 {
    val |= val >> 1;
    val |= val >> 2;
    val |= val >> 4;
    val |= val >> 8;
    val |= val >> 16;
    return LOG2_TABLE[val * 0x07C4_ACDD >> 27];
}
