pkg U32;

use UInt;

pub let MAX: U32 = 0xFFFF_FFFFu32;
pub let MIN: U32 = 0x0000_0000u32;
pub let BITS: UInt = sizeof U32 * 8;

pub fn find(items: [U32], predicate: fn(U32): Bool): UInt {
    let mut i = 0u;
    for i < lengthof items {
        if predicate(items[i]) {
            return i;
        }
        i += 1;
    }
    return UInt::MAX;
}

pub fn map(dst: [mut U32], src: [U32], func: fn(U32): U32) {
    let mut i = 0u;
    let mut length: UInt = UInt::min(lengthof dst, lengthof src);
    for i < length {
        dst[i] = func(src[i]);
        i += 1;
    }
}

pub fn endian_swap(val: U32): U32 {
    return ((val >> 24) & 0x0000_00FF) |
           ((val << 8)  & 0x00FF_0000) |
           ((val >> 8)  & 0x0000_FF00) |
           ((val << 24) & 0xFF00_0000);
}

pub fn align_to_next(addr: &U8): &U32 {
    return (addr + ((sizeof U32 - ((addr as UInt) % sizeof U32)) % sizeof U32)) as &U32;
}

pub fn rotate_left(val: U32, amt: UInt): U32 {
    return (val << amt) | (val >> (BITS - amt));
}

pub fn rotate_right(val: U32, amt: UInt): U32 {
    return (val >> amt) | (val << (BITS - amt));
}

pub fn invert(val: U32): U32 {
    return val ^ MAX;
}

pub fn count_zeros(val: U32): UInt {
    return BITS - count_ones(val);
}

pub fn count_ones(mut val: U32): UInt {
    let mut i = 0u;
    let mut count = 0u;
    for i < BITS {
        count += (val & 1) as UInt;
        val >>= i;
        i += 1;
    }
    return val;
}

let LOG2_TABLE: [U32; 32] = [
     0,  9,  1, 10, 13, 21,  2, 29,
    11, 14, 16, 18, 22, 25,  3, 30,
     8, 12, 20, 28, 15, 17, 24,  7,
    19, 27, 23,  6, 26,  5,  4, 31
];

pub fn log2(mut val: U32): U32 {
    val |= val >> 1;
    val |= val >> 2;
    val |= val >> 4;
    val |= val >> 8;
    val |= val >> 16;
    return LOG2_TABLE[(val * 0x07C4_ACDD) >> 27];
}

pub fn parse(into: &mut U32, base: UInt, str: [U8]): Int {
    let mut tmp: UInt;
    let ret: Int = UInt::parse(&mut tmp, base, str);
    if ret != 0 {
        return ret;
    }
    if tmp > (MAX as UInt) {
        return UInt::ERR_OUT_OF_RANGE;
    }
    *into = tmp as U32;
    return 0;
}

