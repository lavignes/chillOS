// methods of reading Flattended Device Tree (FDT) or DeviceTree Blob (DTB)
// data fed in from the bootloader.
// see https://devicetree-specification.readthedocs.io
pkg Kfdt;

use U8;
use U32;
use UInt;
use Mem;
use Ascii;

pub type Iter = {
    name: [U8],
    first_prop: ?U32,  // address of first prop token
    prop: ?U32,        // address of current prop token
    first_child: ?U32, // address of first child begin node token
    child: ?U32,       // address of current child begin node token
    addr_cells: UInt,  // width in U32s used to define bus address offsets of direct child nodes
    size_cells: UInt,  // width in U32s used to define bus address sizes of direct child nodes
};

pub type Tree = {
    structs_addr: &U32,
    strings_addr: &U8,
    readonly_mem_map_addr: &U8,
    root: Iter,
};

pub let ERR_BAD_MAGIC: Int = -1;
pub let ERR_BAD_VERSION: Int = -2;
pub let ERR_MALFORMED: Int = -3;
pub let ERR_NOT_FOUND: Int = -4;

pub fn init_from_addr(tree: &mut Tree, addr: &U8): Int {
    let mut header: RawHeader;

    // all of the data in the fdt header is U32BE, we deserialize the header into LE
    let length = sizeof RawHeader / sizeof U32;
    U32::map(&mut header as &mut U8 as &mut U32 ~ length, addr as &U32 ~ length, U32::endian_swap);

    if header.magic != 0xd00dfeed {
        return ERR_BAD_MAGIC;
    }
    if header.last_comp_version != 16 {
        return ERR_BAD_VERSION;
    }

    tree.structs_addr = (addr + (header.off_dt_struct as UInt)) as &U32;
    tree.strings_addr = (addr + (header.off_dt_strings as UInt)) as &U8;
    tree.readonly_mem_map_addr = addr + (header.off_mem_rsvmap as UInt);

    let mut tok: &U32 = tree.structs_addr;
    iter_init(tree, &mut tree.root, &mut tok);
    return 0;
}

type PathCtx = {
    tree: &Tree,
    iter: Iter,
};

pub fn load_path(tree: &Tree, mut path: [U8], iter: &mut Iter): Int {
    // the path should be absolute
    if path[0] != '/' {
        return ERR_NOT_FOUND;
    }
    path = &path[1] ~ lengthof path - 1; // trim leading '/'

    let mut path_ctx: PathCtx;
    path_ctx.tree = tree;
    path_ctx.iter = tree.root;

    // for each path component we'll find the corresponding child
    let result: Int = Ascii::split_ctx(path, "/", &mut path_ctx as &mut U8, fn(ctx: &mut U8, split: [U8]): Int {
        let path_ctx = ctx as &mut PathCtx;
        let mut child: Iter;
        let result: Int = find_child(path_ctx.tree, &mut path_ctx.iter, split, &mut child);
        if result != 0 {
            return result;
        }
        path_ctx.iter = child; // FIXME: child is junk????
        return 0;
    });
    if result != 0 {
        return result;
    }
    *iter = path_ctx.iter;
    return 0;
}

pub type Uart = {
    compatible: [U8],
};

pub fn find_uart(tree: &mut Tree, uart: &mut Uart): Int {
    // for now, we'll assume a "/chosen" uart is defined
    let mut iter: Iter;
    let mut result: Int = load_path(tree, "/chosen", &mut iter);
    if result != 0 {
        return result;
    }
    let mut prop: Prop;
    result = find_prop(tree, &mut iter, "stdout-path", &mut prop);
    if result != 0 {
        return result;
    }
    result = load_path(tree, prop.name, &mut iter);
    if result != 0 {
        return result;
    }
    return 0;
}

fn rewind(iter: &mut Iter) {
    iter.prop = iter.first_prop;
    iter.child = iter.first_child;
}

type Prop = {
    name: [U8],
    data: [U8],
};

fn find_prop(tree: &Tree, iter: &mut Iter, name: [U8], prop: &mut Prop): Int {
    for {
        let result: Int = next_prop(tree, iter, prop);
        if result != 0 {
            return result;
        }
        if Ascii::compare(name, prop.name) == 0 {
            break;
        }
    }
    return 0;
}

fn next_prop(tree: &Tree, iter: &mut Iter, prop: &mut Prop): Int {
    if::has_prop ok mut tok: &U32 = iter.prop {
        if *tok != TOK_PROP {
            break has_prop;
        }
        let mut val: U32 = U32::endian_swap(*tok);
        tok += 1; // consume TOK_PROP token
        let data_len = U32::endian_swap(*tok) as UInt;
        tok += 1; // consume data size
        if get_string(tree, U32::endian_swap(*tok), &mut prop.name) != 0 {
            return ERR_MALFORMED;
        }
        tok += 1; // consume name offset
        prop.data = tok as &U8 ~ data_len;
        // skip prop data, align to next token, and skip TOK_NOPs
        tok = U32::align_to_next((tok as &U8) + data_len);
        let pos: UInt = U32::find(tok ~ UInt::MAX, is_not_nop);
        if pos != UInt::MAX {
            tok += pos;
        } else {
            return ERR_MALFORMED;
        }
        return 0;
    }

    return ERR_NOT_FOUND;
}

fn find_child(tree: &Tree, iter: &mut Iter, name: [U8], child: &mut Iter): Int {
    for {
        let mut child: Iter;
        let result: Int = next_child(tree, iter, &mut child);
        if result != 0 {
            return result;
        }
        if Ascii::compare(name, child.name) == 0 {
            break;
        }
    }
    return 0;
}

// performs recursive inorder traversals to get to the next child
fn next_child(tree: &Tree, iter: &mut Iter, child: &mut Iter): Int {
    if ok mut tok: &U32 = iter.child {
        let result: Int = iter_init(tree, child, &mut tok);
        if result != 0 {
            return result;
        }
        // so now we are either at the end of the child node, or at a grandchild
        let mut val: U32 = U32::endian_swap(*tok);
        for val == TOK_BEGIN_NODE {
            // unfortunately, we must recurse down the entire subtree to skip to the next child
            let mut grandchild: Iter; // create an iter over the granchildren
            let result: Int = iter_init(tree, &mut grandchild, &mut tok);
            if result != 0 {
                return result;
            }
            // skip over all great-grandchildren
            for ok _: &U32 = grandchild.child {
                let mut tmp: Iter;
                let result: Int = next_child(tree, &mut grandchild, &mut tmp);
                if result != 0 {
                    return result;
                }
            }
            // see if we have another grandchild
            tok += 1; // consume assumed TOK_END_NODE
            val = U32::endian_swap(*tok);
        }

        // we *must* be at the end of the child
        if val != TOK_END_NODE {
            return ERR_MALFORMED;
        }

        tok += 1;
        val = U32::endian_swap(*tok);
        // we now either have a TOK_BEGIN_NODE of a child, or the TOK_END_NODE
        if val == TOK_BEGIN_NODE {
            iter.child = tok as ?U32;
            return 0;
        }
        if val != TOK_END_NODE {
            return ERR_MALFORMED;
        }
        iter.child = 0 as ?U32; // zero to indicate we are all done
    }
    return ERR_NOT_FOUND;
}

let TOK_BEGIN_NODE: U32 = 0x0000_0001;
let TOK_END_NODE: U32 = 0x0000_0002;
let TOK_PROP: U32 = 0x0000_0003;
let TOK_NOP: U32 = 0x0000_0004;
let TOK_END: U32 = 0x0000_0009;

fn is_not_nop(val: U32): Bool {
    return U32::endian_swap(val) != TOK_NOP;
}

fn get_string(tree: &Tree, string_offset: U32, string: &mut [U8]): Int {
    let base = (tree.strings_addr + (string_offset as UInt)) as &U8;
    let pos: UInt = U8::find(base ~ UInt::MAX, U8::is_zero);
    if pos != UInt::MAX {
        *string = base ~ pos;
        return 0;
    }
    return ERR_MALFORMED;
}

// starting from a likely TOK_NOP/TOK_BEGIN_NODE token, walk forward and initialize an Iter
fn iter_init(tree: &Tree, iter: &mut Iter, tok: &mut &U32): Int {
    Mem::set(iter as &mut U8 ~ sizeof Iter, 0);

    let mut pos: UInt = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop);
    if pos != UInt::MAX {
        *tok += pos;
        if U32::endian_swap(**tok) != TOK_BEGIN_NODE {
            return ERR_MALFORMED;
        }
    }

    // the node name is the next ptr after the TOK_BEGIN_NODE
    *tok += 1;
    let base = *tok as &U8;
    // following the name is possible padding bytes and the next token
    pos = U8::find(base ~ UInt::MAX, U8::is_zero);
    if pos != UInt::MAX {
        iter.name = base ~ pos;
        // add padding to align to next token
        *tok = U32::align_to_next(base + pos + 1); // dont forget null byte
    } else {
        return ERR_MALFORMED;
    }

    pos = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop);
    if pos != UInt::MAX {
        *tok += pos;
    } else {
        return ERR_MALFORMED;
    }

    // after this, we may have a TOK_PROP, the TOK_BEGIN_NODE of a child, or the TOK_END_NODE
    let mut val: U32 = U32::endian_swap(**tok);
    if val == TOK_PROP {
        iter.first_prop = *tok as ?U32;
        iter.prop = *tok as ?U32;
        // now we need to skip over the prop data and all subsequent props
        for val == TOK_PROP {
            *tok += 1; // consume TOK_PROP token
            let prop_data_size: UInt = U32::endian_swap(**tok) as UInt;
            *tok += 1; // consume data size
            let mut prop_name: [U8];
            if get_string(tree, U32::endian_swap(**tok), &mut prop_name) != 0 {
                return ERR_MALFORMED;
            }
            *tok += 1; // consume name offset

            // if the property is one of #address-cells or #size-cells read them now
            if Ascii::compare("#address-cells", prop_name) == 0 {
                iter.addr_cells = U32::endian_swap(**tok);
            } else if Ascii::compare("#size-cells", prop_name) == 0 {
                iter.size_cells = U32::endian_swap(**tok);
            }
            // skip prop data, align to next token, and skip TOK_NOPs
            *tok = U32::align_to_next((*tok as &U8) + prop_data_size);
            pos = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop);
            if pos != UInt::MAX {
               *tok += pos;
            } else {
                return ERR_MALFORMED;
            }
            val = U32::endian_swap(**tok);
        }
    }
    // we now either have a TOK_BEGIN_NODE of a child, or the TOK_END_NODE
    if val == TOK_BEGIN_NODE {
        iter.first_child = *tok as ?U32;
        iter.child = *tok as ?U32;
    } else if val != TOK_END_NODE {
        return ERR_MALFORMED;
    }
    return 0;
}

type RawHeader = {
    magic: U32,
    totalsize: U32,
    off_dt_struct: U32,
    off_dt_strings: U32,
    off_mem_rsvmap: U32,
    version: U32,
    last_comp_version: U32,
    boot_cpuid_phys: U32,
    size_dt_strings: U32,
    size_dt_struct: U32,
};

