// methods of reading Flattended Device Tree (FDT) or DeviceTree Blob (DTB)
// data fed in from the bootloader.
// see https://devicetree-specification.readthedocs.io
#[HACK_typeorder "_ZN4Kfdt4IterE" "_ZN4Kfdt4TreeE"]
pkg Kfdt;

use U8;
use U32;
use UInt;
use Mem;
use Ascii;

pub type Iter: {
    name: []U8,
    first_prop: ?U32,  // address of first prop token
    prop: ?U32,        // address of current prop token
    first_child: ?U32, // address of first child begin node token
    child: ?U32,       // address of current child begin node token
    addr_cells: !UInt, // width in U32s used to define bus address offsets of direct child nodes
    size_cells: !UInt, // width in U32s used to define bus address sizes of direct child nodes
};

pub type Tree: {
    structs_addr: &U32,
    strings_addr: &U8,
    readonly_mem_map_addr: &U8,
    root: Iter,
};

pub let ERR_NOT_FOUND: Int = 0;
pub let ERR_BAD_MAGIC: Int = -1;
pub let ERR_BAD_VERSION: Int = -2;
pub let ERR_MALFORMED: Int = -3;

pub fn init(addr: &U8): !Tree {
    let mut header: RawHeader;

    // all of the data in the fdt header is U32BE, we deserialize the header into LE
    let length = sizeof RawHeader / sizeof U32;
    U32::map(&mut header as &mut U8 as &mut U32 ~ length, addr as &U32 ~ length, U32::endian_swap);

    if header.magic != 0xd00dfeed {
        return ERR_BAD_MAGIC err;
    }
    if header.last_comp_version != 16 {
        return ERR_BAD_VERSION err;
    }

    let mut tree: Tree;
    tree.structs_addr = (addr + (header.off_dt_struct as UInt)) as &U32;
    tree.strings_addr = (addr + (header.off_dt_strings as UInt)) as &U8;
    tree.readonly_mem_map_addr = addr + (header.off_mem_rsvmap as UInt);

    let mut tok: &U32 = tree.structs_addr;
    try let _: Nil = iter_init(&mut tree, &mut tree.root, &mut tok);
    return tree ok;
}

type PathCtx: {
    tree: &Tree,
    iter: Iter,
};

pub fn find_path(tree: &Tree, mut path: []U8): !Iter {
    // the path should be absolute
    if path[0] != '/' {
        return ERR_NOT_FOUND err;
    }
    path = &path[1] ~ lengthof path - 1; // trim leading '/'

    let mut path_ctx: PathCtx;
    path_ctx.tree = tree;
    path_ctx.iter = tree.root;

    // for each path component we'll find the corresponding child
    try let _: Nil = Ascii::split_ctx(path, "/", &mut path_ctx as &mut U8, fn(ctx: &mut U8, split: []U8): !Nil {
        let path_ctx = ctx as &mut PathCtx;
        let mut child: Iter;
        try let _: Nil = find_child(path_ctx.tree, &mut path_ctx.iter, split, &mut child);
        path_ctx.iter = child;
    });
    return path_ctx.iter ok;
}

pub type Uart: {
    name: []U8,
    compatible: []U8,
    pub base_address: ?U8,
};

pub fn find_uart(tree: &Tree): !Uart {
    // for now, we'll assume a "/chosen" uart is defined
    try let mut chosen: Iter = find_path(tree, "/chosen");
    try let stdout_path: Prop = find_prop(tree, &mut chosen, "stdout-path");
    try let mut stdout: Iter = find_path(tree, Ascii::before(stdout_path.data, "\x00"));
    try let compatible: Prop = find_prop(tree, &mut stdout, "compatible");
    try let base_address: UInt = UInt::parse(16, Ascii::after(stdout.name, "@")) else {
        return ERR_MALFORMED err;
    }
    let mut uart: Uart;
    uart.name = stdout.name;
    uart.compatible = Ascii::before(compatible.data, "\x00");
    uart.base_address = base_address as ?U8;
    return uart ok;
}

pub fn rewind(iter: &mut Iter) {
    iter.child = iter.first_child;
    iter.prop = iter.first_prop;
}

type Prop: {
    name: []U8,
    data: []U8,
};

fn find_prop(tree: &Tree, iter: &mut Iter, name: []U8): !Prop {
    for {
        try let prop: Prop = next_prop(tree, iter);
        if Ascii::compare(name, prop.name) == 0 {
            return prop ok;
        }
    }
    return ERR_NOT_FOUND err;
}

fn next_prop(tree: &Tree, iter: &mut Iter): !Prop {
    try let mut tok: &U32 = iter.prop else {
        return ERR_NOT_FOUND err;
    }
    let mut val: U32 = U32::endian_swap(*tok);
    if val != TOK_PROP {
        return ERR_NOT_FOUND err;
    }
    tok += 1; // consume TOK_PROP token
    let data_len = U32::endian_swap(*tok) as UInt;
    tok += 1; // consume data size
    try let string: []U8 = get_string(tree, U32::endian_swap(*tok));
    tok += 1; // consume name offset
    let mut prop: Prop;
    prop.name = string;
    prop.data = tok as &U8 ~ data_len;
    // skip prop data, align to next token, and skip TOK_NOPs
    tok = U32::align_to_next((tok as &U8) + data_len);
    if let pos: UInt = U32::find(tok ~ UInt::MAX, is_not_nop) {
        tok += pos;
    } else {
        return ERR_MALFORMED err;
    }
    val = U32::endian_swap(*tok);
    if val == TOK_PROP {
        iter.prop = tok as ?U32;
    } else {
        iter.prop = 0 as ?U32;
    }
    return prop ok;
}

fn find_child(tree: &Tree, iter: &mut Iter, name: []U8, child: &mut Iter): !Nil {
    for {
        try let _: Nil = next_child(tree, iter, child);
        if Ascii::compare(name, child.name) == 0 {
            break;
        }
    }
}

// performs recursive inorder traversals to get to the next child
fn next_child_tok(tree: &Tree, iter: &mut Iter, child: &mut Iter, tok: &mut &U32): !Nil {
    try let _: &U32 = iter.child else {
        return ERR_NOT_FOUND err;
    }
    try let _: Nil = iter_init(tree, child, tok);

    // so now we are either at the end of the child node, or at a grandchild
    let mut val: U32 = U32::endian_swap(**tok);
    for val == TOK_BEGIN_NODE { // while we have a grandchild
        // unfortunately, we must recurse down the entire grandchild tree to skip to the next child
        let mut grandchild: Iter;
        try let _: Nil = iter_init(tree, &mut grandchild, tok);

        // skip over all great-grandchildren
        for let _: &U32 = grandchild.child {
            let mut great_grandchild: Iter;
            try let _: Nil = next_child_tok(tree, &mut grandchild, &mut great_grandchild, tok) else e {
                if e == ERR_NOT_FOUND {
                    break;
                }
                return e err;
            }
        }
        *tok += 1; // consume TOK_END_NODE of grandchild
        val = U32::endian_swap(**tok);
    }

    if val != TOK_END_NODE { // we *must* be at the end of the child
        return ERR_MALFORMED err;
    }
    *tok += 1; // consume TOK_END_NODE
    val = U32::endian_swap(**tok);

    // we now either have a TOK_BEGIN_NODE of the next child, or the TOK_END_NODE
    if val == TOK_BEGIN_NODE {
        iter.child = *tok as ?U32;
        return;
    }
    if val != TOK_END_NODE {
        return ERR_MALFORMED err;
    }
    // end of all children
    iter.child = 0 as ?U32;
}

fn next_child(tree: &Tree, iter: &mut Iter, child: &mut Iter): !Nil {
    try let mut tok: &U32 = iter.child else {
        return ERR_NOT_FOUND err;
    }
    return next_child_tok(tree, iter, child, &mut tok);
}

let TOK_BEGIN_NODE: U32 = 0x0000_0001;
let TOK_END_NODE: U32 = 0x0000_0002;
let TOK_PROP: U32 = 0x0000_0003;
let TOK_NOP: U32 = 0x0000_0004;
let TOK_END: U32 = 0x0000_0009;

fn is_not_nop(val: U32): Bool {
    return U32::endian_swap(val) != TOK_NOP;
}

fn get_string(tree: &Tree, string_offset: U32): ![]U8 {
    let base = (tree.strings_addr + (string_offset as UInt)) as &U8;
    if let pos: UInt = U8::find(base ~ UInt::MAX, U8::is_zero) {
        return base ~ pos ok;
    }
    return ERR_MALFORMED err;
}

// starting from a likely TOK_NOP/TOK_BEGIN_NODE token, walk forward and initialize an Iter
fn iter_init(tree: &Tree, iter: &mut Iter, tok: &mut &U32): !Nil {
    Mem::set(iter as &mut U8 ~ sizeof Iter, 0);

    if let pos: UInt = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop) {
        *tok += pos;
    }
    if U32::endian_swap(**tok) != TOK_BEGIN_NODE {
        return ERR_MALFORMED err;
    }

    // the node name is the next ptr after the TOK_BEGIN_NODE
    *tok += 1;
    let base = *tok as &U8;
    // following the name is possible padding bytes and the next token
    if let pos: UInt = U8::find(base ~ UInt::MAX, U8::is_zero) {
        iter.name = base ~ pos;
        // add padding to align to next token
        *tok = U32::align_to_next(base + pos + 1); // dont forget null byte
    } else {
        return ERR_MALFORMED err;
    }

    if let pos: UInt = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop) {
        *tok += pos;
    } else {
        return ERR_MALFORMED err;
    }

    // after this, we may have a TOK_PROP, the TOK_BEGIN_NODE of a child, or the TOK_END_NODE
    let mut val: U32 = U32::endian_swap(**tok);
    if val == TOK_PROP {
        iter.prop = *tok as ?U32;
        iter.first_prop = *tok as ?U32;
        // now we need to skip over the prop data and all subsequent props
        for val == TOK_PROP {
            *tok += 1; // consume TOK_PROP token
            let prop_data_size: UInt = U32::endian_swap(**tok) as UInt;
            *tok += 1; // consume data size
            try let prop_name: []U8 = get_string(tree, U32::endian_swap(**tok));
            *tok += 1; // consume name offset

            // if the property is one of #address-cells or #size-cells read them now
            if Ascii::compare("#address-cells", prop_name) == 0 {
                iter.addr_cells = (U32::endian_swap(**tok) as UInt) ok !UInt;
            } else if Ascii::compare("#size-cells", prop_name) == 0 {
                iter.size_cells = (U32::endian_swap(**tok) as UInt) ok !UInt;
            }
            // skip prop data, align to next token, and skip TOK_NOPs
            *tok = U32::align_to_next((*tok as &U8) + prop_data_size);
            if let pos: UInt = U32::find(*tok as &U32 ~ UInt::MAX, is_not_nop) {
               *tok += pos;
            } else {
                return ERR_MALFORMED err;
            }
            val = U32::endian_swap(**tok);
        }
    }
    // we now either have a TOK_BEGIN_NODE of a child, or the TOK_END_NODE
    if val == TOK_BEGIN_NODE {
        iter.child = *tok as ?U32;
        iter.first_child = *tok as ?U32;
    } else if val != TOK_END_NODE {
        return ERR_MALFORMED err;
    }
}

type RawHeader: {
    magic: U32,
    totalsize: U32,
    off_dt_struct: U32,
    off_dt_strings: U32,
    off_mem_rsvmap: U32,
    version: U32,
    last_comp_version: U32,
    boot_cpuid_phys: U32,
    size_dt_strings: U32,
    size_dt_struct: U32,
};

