pkg Mem;

pub type FnAlloc = fn(&mut Any, UInt, &mut Any): &mut Any;
pub type FnRealloc = fn(&mut Any, &mut Any, UInt, &mut Any): &mut Any;
pub type FnDealloc = fn(&mut Any, &mut Any, &mut Any);

pub type AllocTable = {
    ctx: &mut Any,
    alloc: FnAlloc,
    realloc: FnRealloc,
    dealloc: FnDealloc,
};

pub fn equals(lhs: &Any, rhs: &Any, mut size: UInt): Bool {
    for size > 0 {
        size -= 1;
        if *((lhs as &U8) + size) != *((rhs as &U8) + size) {
            return false;
        }
    }
    return true;
}

pub fn zero(addr: &mut Any, size: UInt) {
    set(addr, size, 0);
}

pub fn set(addr: &mut Any, mut size: UInt, val: U8) {
    for size > 0 {
        size -= 1;
        *((addr as &mut U8) + size) = val;
    }
}
