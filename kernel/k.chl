pkg k;

use k_fdt;

type Foo = {};

let x: [3]: mut Int = [0];

pub fn start(fdt: &k_fdt::Header) {
    let magic: U32 = u32_endian_swap((*fdt).magic);

    let mut f: fn(&k_fdt::Header) = start;

    let x: Foo = Foo of {};

    if magic != k_fdt::EXPECTED_MAGIC {
        halt();
    }
}

pub fn halt() {
    for {}
}

fn u32_endian_swap(val: U32): U32 {
    return ((val >> 24) & 0x000000FF) |
           ((val << 8)  & 0x00FF0000) |
           ((val >> 8)  & 0x0000FF00) |
           ((val << 24) & 0xFF000000);
}
