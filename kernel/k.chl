pkg k;

use k_fdt as fdt;
use U32;

type Foo = {};

let mut x: [Int; 3] = [1, 2, 3];
let hello: [U8; 5] = "hello";

pub fn start(fdt: &fdt::Header) {
    let magic: U32 = U32::endian_swap((*fdt).magic);

    let mut f: fn(&fdt::Header) = start;

    let bar: U32 = 0;
    let foo: U32 = U32::invert(bar);

    memset(&mut x, sizeof [Int; 3], 0);

    take_array(x);

    if magic != fdt::EXPECTED_MAGIC {
        halt();
    }
}

pub fn halt() {
    for {}
}

fn take_array(mut arr: [Int; 3]) {
    arr[0] = 10;
}

fn memset(ptr: &mut Any, size: UInt, val: U8) {
    let mut i: UInt = 0;
    for i < size {
        *((ptr as &mut U8) + i) = 0;
    }
}
