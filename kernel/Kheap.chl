// very core kernel-level heap management
pkg Kheap;

use Atomic;
use UInt;
use U8;

let mut RANGE: []mut U8;
let mut HEAD: Node;
let mut LOCK: Atomic::Flag;
let BLOCK_SIZE: UInt = 1u << 14; // 16384 == 0x4000

type Node: {
    next: ?mut Node,
    prev: ?mut Node,
};

pub fn init(range: []mut U8, stack_top: UInt) {
    // the stack follows the kernel image in memory so we want to make sure we don't
    // allocate over that.
    let reserved = stack_top - (&range[0] as UInt);

    // though since we allocate in fixed size blocks, we want to align to the first block
    let aligned: UInt = (reserved + BLOCK_SIZE - 1) & !(BLOCK_SIZE - 1);

    // for now we just assume there is a single contiguous memory range
    // to rule that out we'd need to interrogate more data from the device tree.
    RANGE = &mut range[aligned] ~ lengthof range - aligned;

    HEAD.next = 0 as ?mut Node;
    HEAD.prev = 0 as ?mut Node;

    Atomic::flag_init(&mut LOCK);
}

pub fn alloc(min_size: UInt) -> []mut U8 {
    for !Atomic::test_and_set(&mut LOCK, Atomic::ORDER_AQUIRE) {}
    let mem: []mut U8 = U8::EMPTY_MUT;
    {::exit
    }
    Atomic::clear(&mut LOCK, Atomic::ORDER_RELEASE);
    return mem;
}
