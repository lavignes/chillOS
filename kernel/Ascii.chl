pkg Ascii;

pub fn compare(lhs: [U8], rhs: [U8]): Int {
    let length = lengthof lhs;
    if (length != lengthof rhs) || (length == 0) {
        return -1;
    }
    let mut i = 0u;
    let mut cl: U8;
    let mut cr: U8;
    for i < length {
        cl = lhs[i];
        cr = rhs[i];
        if cl != cr {
            return cl - cr;
        }
        i += 1;
    }
    return -1;
}

//pub fn find(str: [U8], substr: [U8]): UInt {
//
//}

//pub fn split(str: [U8], substr: [U8], consumer: fn(substr: [U8])) {
//     
//}

pub fn is_digit(val: U8): Bool {
    return (val >= '0') && (val <= '9');
}

pub fn is_alpha(val: U8): Bool {
    return is_upper(val) || is_lower(val);
}

pub fn is_upper(val: U8): Bool {
    return (val >= 'A') && (val <= 'Z');
}

pub fn is_lower(val: U8): Bool {
    return (val >= 'a') && (val <= 'z');
}

pub fn to_lower(val: U8): U8 {
    if is_upper(val) {
        return toggle_case(val);
    }
    return val;
}

pub fn to_upper(val: U8): U8 {
    if is_lower(val) {
        return toggle_case(val);
    }
    return val;
}

pub fn toggle_case(val: U8): U8 {
    return val ^ 32;
}
