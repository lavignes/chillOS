// kernel entry point
#[HACK_typeorder "_ZN4Kfdt4UartE" "__fal_ZN4Kfdt4UartE"]
#[HACK_typeorder "_ZN4Kfdt4IterE" "__fal_ZN4Kfdt4IterE"]
pkg K;

use Kfdt;

pub fn start(fdt_start: &U8) {
    let mut tree: Kfdt::Tree;
    try let _: Nil = Kfdt::init_from_addr(&mut tree, fdt_start) else {
        halt();
    }

    try let uart: Kfdt::Uart = Kfdt::find_uart(&tree) else {
        halt();
    }

    // now we have the fdt, we're going to hurry and locate the
    // the boot console device, usually a 16550-style uart

    // once the kernel is up and running, we'll enumerate the *drivers*
    // asking them to confirm if they are compatible with the hardware
    // in the fdt and activate them. Linux does something like this.
}

pub fn halt() {
    for {}
}

