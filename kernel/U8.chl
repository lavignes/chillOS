pkg U8;

use UInt;

pub let MIN: U8 = 0x00u8;
pub let MAX: U8 = 0xFFu8;
pub let BITS: UInt = sizeof U8 * 8;

pub fn is_zero(val: U8): Bool {
    return val == 0;
}

pub fn find(mut items: &U8, mut count: UInt, predicate: fn(U8): Bool): ?U8 {
    for count > 0 {
        count -= 1;
        if predicate(*items) {
            return items as ?U8;
        }
        items += 1;
    }
    return 0 as ?U8;
}

pub fn parse(into: &mut U8, base: UInt, str: &U8, len: UInt): Int {
    let mut tmp: UInt;
    let ret: Int = UInt::parse(&mut tmp, base, str, len);
    if ret != 0 {
        return ret;
    }
    if tmp > (MAX as UInt) {
        return UInt::ERR_OUT_OF_RANGE;
    }
    *into = tmp as U8;
    return 0;
}
