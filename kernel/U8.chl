pkg U8;

use UInt;

pub let MIN: U8 = 0x00u8;
pub let MAX: U8 = 0xFFu8;
pub let BITS: UInt = sizeof U8 * 8;

pub fn is_zero(val: U8): Bool {
    return val == 0;
}

pub fn find(items: [U8], predicate: fn(U8): Bool): UInt {
    let mut i = 0u;
    for i < lengthof items {
        if predicate(items[i]) {
            return i;
        }
        i += 1;
    }
    return UInt::MAX;
}

pub fn parse(into: &mut U8, base: UInt, str: [U8]): Int {
    let mut tmp: UInt;
    let ret: Int = UInt::parse(&mut tmp, base, str);
    if ret != 0 {
        return ret;
    }
    if tmp > (MAX as UInt) {
        return UInt::ERR_OUT_OF_RANGE;
    }
    *into = tmp as U8;
    return 0;
}
